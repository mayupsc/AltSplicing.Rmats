configfile: "AS.config.yaml"

rule all:
	input:
		expand('fastq/{sample}_R1.fastq.gz',sample=config['samples']),
		expand('fastq/{sample}_R2.fastq.gz',sample=config['samples']),
		expand('fastqc/raw/{sample}_R1_fastqc.html', sample=config['samples']),
		expand('fastqc/raw/{sample}_R2_fastqc.html', sample=config['samples']),
		expand('fastqc/clean/{sample}_same_length_R1_fastqc.html', sample=config['samples']),
		expand('fastqc/clean/{sample}_same_length_R2_fastqc.html', sample=config['samples']),
		expand('clean/{sample}_discard_short_R1.fastq.gz',sample=config['samples']),
		expand('clean/{sample}_discard_short_R2.fastq.gz',sample=config['samples']),
		expand('clean/{sample}_same_length_R1.fastq.gz',sample=config['samples']),
		expand('clean/{sample}_same_length_R2.fastq.gz',sample=config['samples']),
		expand('bam/{sample}.same.length.bam',sample=config['samples']),
		expand('bam/{sample}.no.duplicate.bam',sample=config['samples']),
		expand('bam/{sample}.no.duplicate.bam.bai',sample=config['samples'])
rule fastqc_raw_PE:
	input:
		'fastq/{sample}_R1.fastq.gz',
		'fastq/{sample}_R2.fastq.gz'
	output:
		'fastqc/raw/{sample}_R1_fastqc.html',
		'fastqc/raw/{sample}_R2_fastqc.html'
	params:
		conda = config['conda_path']
	shell:
		'{params.conda}/fastqc --quiet -t 2 -o fastqc/raw {input}'

rule trim_and_discard_short_reads:
	input:
		r1 = config['path']+'/{sample}_R1.fastq.gz',
		r2 = config['path']+'/{sample}_R2.fastq.gz'
	output:
		r1 = 'clean/{sample}_discard_short_R1.fastq.gz',
		r2 = 'clean/{sample}_discard_short_R2.fastq.gz'
	params:
		forw = config['forward_adapter'],
		rev  = config['reverse_adapter']
	shell:
		'cutadapt -a {params.forw} -A {params.rev} --discard-untrimmed -m 140  -q 10 -o {output.r1} -p {output.r2} {input.r1} {input.r2}'
rule trim_to_same_length:
	input:
		r1 = 'clean/{sample}_discard_short_R1.fastq.gz',
		r2 = 'clean/{sample}_discard_short_R2.fastq.gz'
	output:
		r1 = 'clean/{sample}_same_length_R1.fastq.gz',
		r2 = 'clean/{sample}_same_length_R2.fastq.gz'

	shell:
		'python ~/biosoft/rMATS.3.2.1.beta/bin/trimFastq.py  {input.r1} {output.r1} 140;python ~/biosoft/rMATS.3.2.1.beta/bin/trimFastq.py  {input.r2} {output.r2} 140'
rule fastqc_clean_PE:
	input:
		'clean/{sample}_same_length_R1.fastq.gz',
		'clean/{sample}_same_length_R2.fastq.gz'
	output:
		'fastqc/clean/{sample}_same_length_R1_fastqc.html',
		'fastqc/clean/{sample}_same_length_R2_fastqc.html'
	params:
		conda = config['conda_path']
	shell:
		'{params.conda}/fastqc -t 2 -o fastqc/clean {input}'

rule fastqc_stat_PE:
	input:
		['fastqc/raw/{sample}_R1_fastqc.html'.format(sample=x) for x in config['samples']],
		['fastqc/raw/{sample}_R2_fastqc.html'.format(sample=x) for x in config['samples']],
		['fastqc/clean/{sample}_same_length_R1_fastqc.html'.format(sample=x) for x in config['samples']],
		['fastqc/clean/{sample}_same_length_R2_fastqc.html'.format(sample=x) for x in config['samples']]
	output:
		'stat/fastqc_stat.tsv'
	params:
		script = config['script_path']
	
	shell:
		'Rscript {params.script}/reads_stat_by_fastqcr.R'
rule hisat2:
	input:
		r1 = 'clean/{sample}_same_length_R1.fastq.gz',
		r2 = 'clean/{sample}_same_length_R2.fastq.gz'
	output:
		'bam/{sample}.same.length.bam'
	params:
		index = config['index'],
		prefix = 'bam/{sample}'
	shell:
		'hisat2 --rna-strandness RF -p 10 --dta -x {params.index} -1 {input.r1} -2 {input.r2} |samtools view -Shub|samtools sort - -T {params.prefix} -o {output}'
rule drop_multi_mapping_reads:
	input:
		'bam/{sample}.same.length.bam'
	output:
		'bam/{sample}.no.duplicate.bam'
	shell:
		'samtools view -bhS -q 30 {input} > {output}'
rule index_no_duplicate_bam:
	input:
		'bam/{sample}.no.duplicate.bam'
	output:
		'bam/{sample}.no.duplicate.bam.bai'
	shell:
		'samtools index {input} > {output}'